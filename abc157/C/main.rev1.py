#!/usr/bin/env python3
import sys


def solve(N: int, M: int, s: "List[int]", c: "List[int]"):
    nl = {}
    for ss, cc in zip(s, c):
        if ss in nl:
            if nl[ss] == cc:
                continue
            else:
                print(-1)
                return
        nl[ss] = cc
    if N != 1 and 1 in nl and nl[1] == 0:
        print(-1)
        return
    if not (1 in nl):
        if N == 1:
            nl[1] = 0
        else:
            nl[1] = 1
    for i in range(1, N+1):
        if i in nl:
            print(nl[i], end="")
        else:
            print(0, end="")
    print()

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    s = []  # type: "List[int]"
    c = []  # type: "List[int]"
    for i in range(M):
        s.append(int(next(tokens)))
        c.append(int(next(tokens)))
    solve(N, M, s, c)

if __name__ == '__main__':
    main()
