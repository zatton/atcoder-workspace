#!/usr/bin/env python3
import sys
import math


def solve(K: int, N: int, A: "List[int]"):
    min_dist = K - A[0] - (K - A[-1])
    for i in range(N - 1):
        tmp_dist = K - (A[i + 1] - A[i])
        if tmp_dist < min_dist:
            min_dist = tmp_dist
    print(min_dist)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(K, N, A)

if __name__ == '__main__':
    main()
