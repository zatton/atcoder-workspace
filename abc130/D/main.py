#!/usr/bin/env python3
import sys
import bisect
import copy

def solve(N: int, K: int, a: "List[int]"):
    b = copy.copy(a)
    for i in range(1, len(a)):
        b[i] += b[i - 1]
    ans = 0
    last = len(a)
    #print(b)
    for i in reversed(range(len(a))):
        s = b[i]
        if s < K:
            break
        #si = bisect.bisect(b[:last], s - K)
        si = bisect.bisect(b, s - K)
        #last = si
        ans += (si + 1)
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
