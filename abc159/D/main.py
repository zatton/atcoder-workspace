#!/usr/bin/env python3
import sys
import copy
import math
#sys.setrecursionlimit(2000)

kaijo_memo = {}
combi_memo = {}

def kaijo(n):
    if n in kaijo_memo:
        return kaijo_memo[n]
    if n == 1 or n == 0:
        return 1
    else:
        res = n * kaijo(n - 1)
        kaijo_memo[n] = res
        return res

def combi(n, a):
    #if (n, a) in combi_memo:
    #    return combi_memo[(n, a)]
    #res = kaijo(n) / kaijo(a) / kaijo(n - a)
    #combi_memo[(n, a)] = res
    #return res
    if (n, a) in combi_memo:
        return combi_memo[(n, a)]
    res = math.factorial(n) // math.factorial(a) // math.factorial(n - a)
    combi_memo[(n, a)] = res
    return res

def solve(N: int, A: "List[int]"):
    li = {}
    for a in A:
        if a in li:
            li[a] += 1
        else:
            li[a] = 1
    combi_all = 0
    for num in li.keys():
        a = li[num]
        if a > 1:
            combi_all += combi(a, 2)
    #print(li)
    for k in range(N):
        print(combi_all - (li[A[k]] - 1))
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
