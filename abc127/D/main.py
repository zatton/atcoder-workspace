#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]", Q):
    Al = {}
    for a in A:
        if a in Al:
            Al[a] += 1
        else:
            Al[a] = 1
    for b, c in Q:
        if c in Al:
            Al[c] += b
        else:
            Al[c] = b
    Alq = list(Al.items())
    Alq.sort(key=lambda q:q[0], reverse=True)
    ans = 0
    n = 0
    for num, cnt in Alq:
        if n < N:
            pcnt = min(N - n, cnt)
            ans += pcnt * num
            n += pcnt
        else:
            break
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [(int(), int()) for _ in range(M)]
    for i in range(M):
        Q[i] = (int(next(tokens)), int(next(tokens)))
    solve(N, M, A, Q)

if __name__ == '__main__':
    main()
