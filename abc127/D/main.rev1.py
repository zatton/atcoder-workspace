#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]", Q):
    Al = {}
    for a in A:
        if a in Al:
            Al[a] += 1
        else:
            Al[a] = 1
    Alq = Al.items()
    Alq.sort(key=lambda q:q[0])
    for i in range(1, len(Alq)):
        Alq[i][1] += Alq[i - 1][1]
    #print(Ali)
    Q.sort(key=lambda q:q[1], reverse=True)
    end = False
    for b, c in Q:
        tmp = b
        while tmp > 0:
            if len(Ali) == 0:
                end = True
                break
            key = Ali[0]
            if key >= c:
                # 置き換える必要なし
                end = True
                break
            if Al[key] > tmp:
                ch = tmp
            else:
                ch = Al[key]
            if c in Al:
                Al[c] += ch
            else:
                Al[c] = ch
            Al[key] -= ch
            tmp -= ch
            if Al[key] == 0:
                del Al[key]
                Ali = Ali[1:]
        #print(Al)
        if end:
            break
    ans = 0
    for n, cnt in Al.items():
        ans += n * cnt
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [(int(), int()) for _ in range(M)]
    for i in range(M):
        Q[i] = (int(next(tokens)), int(next(tokens)))
    solve(N, M, A, Q)

if __name__ == '__main__':
    main()
