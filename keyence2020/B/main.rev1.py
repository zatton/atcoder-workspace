#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, X: "List[int]", L: "List[int]"):
    R = list(zip(X, L))
    R.sort(key=lambda r: r[0] + r[1])
    li = {}
    ke = []
    tmp_max = 0
    for r in R:
        if len(ke) == 0:
            li[r[0] + r[1]] = 1
            tmp_max = 1
            ke.append(r[0] + r[1])
            continue
        ki = bisect.bisect(ke, r[0] - r[1])
        if ki == 0:
            if not r[0] + r[1] in li:
                if tmp_max < 1:
                    li[r[0] + r[1]] = 1
                    tmp_max = 1
                    ke.append(r[0] + r[1])
                    #bisect.insort(ke, r[0] + r[1] - 1)
        else:
            if r[0] + r[1] in li:
                val = max(li[r[0] + r[1]], li[ke[ki - 1]] + 1)
                if tmp_max < val:
                    li[r[0] + r[1]] = val
                    tmp_max = val
            else:
                val = max(li[ke[ki - 1]] + 1, tmp_max)
                if tmp_max < val:
                    li[r[0] + r[1]] = val
                    tmp_max = val
                    ke.append(r[0] + r[1])
    #print(li)
    print(tmp_max)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    L = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        L[i] = int(next(tokens))
    solve(N, X, L)

if __name__ == '__main__':
    main()
