#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, X: "List[int]", L: "List[int]"):
    R = list(zip(X, L))
    R.sort(key=lambda r: r[0] + r[1])
    tmp_max = None
    ans = 0
    for r in R:
        if tmp_max is None:
            tmp_max = r[0] + r[1]
            ans = 1
        elif tmp_max <= r[0] - r[1]:
            tmp_max = r[0] + r[1]
            ans += 1
    #print(li)
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    L = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        L[i] = int(next(tokens))
    solve(N, X, L)

if __name__ == '__main__':
    main()
