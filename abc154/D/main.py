#!/usr/bin/env python3
import sys


def solve(N: int, K: int, p: "List[int]"):
    tmp = K + sum(p[0:K])
    sump = tmp
    for i in range(1, N - K + 1):
        #print(p[i:i + K])
        tmp += p[i + K - 1] - p[i - 1]
        if tmp > sump:
            sump = tmp
        #print(sump)
    #print(sump)
    print(sump / 2)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, p)

if __name__ == '__main__':
    main()
