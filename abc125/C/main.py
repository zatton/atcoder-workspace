#!/usr/bin/env python3
import sys

def gcd(a, b):
    if a < b:
        a, b = b, a

    rem = a % b
    if rem == 0:
        return b
    return gcd(b, rem)



def solve(N: int, A: "List[int]"):
    L = [-1] * N
    R = [-1] * N
    L[0] = A[0]
    R[-1] = A[-1]
    for i in range(1, len(A)):
        L[i] = gcd(L[i - 1], A[i])
    for i in reversed(range(len(A) - 1)):
        R[i] = gcd(R[i + 1], A[i])

    ans = max(R[1], L[-2])

    for i in range(1, len(A) - 1):
        tmp = gcd(L[i - 1], R[i + 1])
        if tmp > ans:
            ans = tmp
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
