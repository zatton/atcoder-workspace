#!/usr/bin/env python3
import sys


def solve(N: int, M: int, P: "List[int]", Y: "List[int]"):
    hp = {}
    ans = []
    for i in range(M):
        if P[i] in hp:
            hp[P[i]].append([i, Y[i], -1])
        else:
            hp[P[i]] = [[i, Y[i], -1]]
    for i in range(1, N + 1):
        if i in hp:
            hp[i].sort(key=lambda h:h[1])
            for k, h in enumerate(hp[i]):
                h[2] = k + 1
            ans.extend(hp[i])
    ans.sort(key=lambda h:h[0])
    #print(ans)
    for a in ans:
        print(f"{str(P[a[0]]).zfill(6)}{str(a[2]).zfill(6)}")
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    P = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        P[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, M, P, Y)

if __name__ == '__main__':
    main()
