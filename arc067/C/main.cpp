#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const long long MOD = 1000000007;

map<ll, ll> factor(ll tmp) {
  map<ll, ll> tmp_m;
  // 素因数分解
  while (tmp > 1) {
    int flag = 0;
    //cout << tmp << ' ' << sqrt(tmp) << endl;
    for (ll j = 2; j <= sqrt(tmp); j++) {
      //cout << tmp << ' ' << j << endl;
      if (tmp % j == 0) {
        //cout << j << endl;
        if (tmp_m.find(j) != tmp_m.end()) {
          tmp_m[j] += 1;
        } else {
          tmp_m[j] = 1;
        }
        tmp /= j;
        flag = 1;
        break;
      }
    }
    if (flag == 0) {
      //cout << tmp << endl;
      if (tmp_m.find(tmp) != tmp_m.end()) {
        tmp_m[tmp] += 1;
      } else {
        tmp_m[tmp] = 1;
      }
      break;
    }
  }
  return tmp_m;
}

void solve(long long N){
  map<ll, ll> m;
  for (int i = 2; i <= N; i++) {
    map<ll, ll> tmp_m = factor(i);
    for (auto iter = tmp_m.begin(); iter != tmp_m.end(); iter ++) {
      if (m.find(iter -> first) != m.end()) {
        m[iter -> first] += iter -> second;
      } else {
        m[iter -> first] = 1;
      }
      m[iter -> first] %= MOD;
    }
  }
  ll ans = 1;
  for (auto iter = m.begin(); iter != m.end(); iter ++) {
    //cout << iter -> first << ' ' << iter -> second << endl;
    ans *= iter -> second + 1;
    ans %= MOD;
  }
  cout << ans << endl;
}

// Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    solve(N);
    //factor(4);
    return 0;
}
