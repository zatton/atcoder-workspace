#!/usr/bin/env python3
import sys

dp = [[[0] * 101 for _ in range(101)] for _ in range(101)]

def solve(A: int, B: int, C: int):
    def dfs(a, b, c, P, n): # そこまでの確率
        a, b, c = sorted([a, b, c])
        if dp[a][b][c]:
            #print(a, b, c, P)
            return dp[a][b][c]
        if a == 100 or b == 100 or c == 100:
            #print(a, b, c, P)
            dp[a][b][c] = P * n
            return P * n
        else:
            res = 0
            if a > 0:
                res += dfs(a + 1, b, c, P * a / (a + b + c), n + 1)
            if b > 0:
                res += dfs(a, b + 1, c, P * b / (a + b + c), n + 1)
            if c > 0:
                res += dfs(a, b, c + 1, P * c / (a + b + c), n + 1)
            dp[a][b][c] = res
            return res
    ans = dfs(A, B, C, 1, 0)
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    solve(A, B, C)

if __name__ == '__main__':
    main()
