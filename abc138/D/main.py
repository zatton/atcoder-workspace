#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, a: "List[int]", b: "List[int]", p: "List[int]", x: "List[int]"):
    nei = [[] for _ in range(N)]
    for i in range(N - 1):
        nei[a[i] - 1].append(b[i] - 1)
        nei[b[i] - 1].append(a[i] - 1)
    s = [0] * N
    for i in range(Q):
        s[p[i] - 1] += x[i]
    dep = [-1] * N
    dep[0] = 0
    que = [0]
    ans = [0] * N
    while que:
        now = que.pop()
        ans[now] += s[now]
        for po in nei[now]:
            if dep[po] < 0:
                ans[po] += ans[now]
                dep[po] = dep[now] + 1
                que.append(po)
    print(" ".join(map(str, ans)))
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    p = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        p[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(N, Q, a, b, p, x)

if __name__ == '__main__':
    main()
