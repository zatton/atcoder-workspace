#!/usr/bin/env python3
import sys


def count_betw(a, b, used, cand):
    if len(cand) > 0:
        val = 0
        for c in cand:
            val += count_betw(a, b, [*used, c], [ i for i in cand if i != c ])
        return val
    else:
        num = int("".join(map(str, used)))
        if (num - a) * (num - b) < 0:
            return 1
        else:
            return 0

def solve(N: int, P: "List[int]", Q: "List[int]"):
    p = int("".join(map(str, P)))
    q = int("".join(map(str, Q)))
    if p == q:
        ans = 0
    else:
        ans = count_betw(p, q, [], list(range(1, N + 1))) + 1
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q)

if __name__ == '__main__':
    main()
